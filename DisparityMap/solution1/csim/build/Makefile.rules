#===- Makefile.sysc.rules ----------------------------------*- Makefile -*--===#
#
# Makefile rules for autopilot SystemC simulation flow
#
# Copyright (C) 2011 XILINX, Inc.
#
#===------------------------------------------------------------------------===#


# Required user variables:
#TARGET

# Optional variables:
#ExtraCFlags
#ExtraCXXFlags
#ExtraLDFlags

# Users may have their own SystemC enviornments, by defineing the
# following variables
#HLS_SYSTEMC_HOME
#HLS_SYSTEMC_LIB_PATH

### Common shell commands.
Echo = @echo
MKDIR = mkdir -p
Make = make
MV = mv
RM = rm

### Directory for object files.
ifndef ObjDir
  ObjDir := obj
endif

### Switch for displaying detailed information.
#VERBOSE = 1


ifdef VERBOSE
  Verb :=
else
  Verb := @
endif

ifndef AUTOPILOT_TOOL
  AUTOPILOT_TOOL = "$(shell autoesl -proot)/tools"
endif

ifndef AUTOPILOT_TECH
  AUTOPILOT_TECH = "$(AUTOPILOT_ROOT)/common/technology"
endif

ifndef HLS_SYSTEMC_HOME
  HLS_SYSTEMC_HOME = $(AUTOPILOT_TOOL)/systemc
endif

ifndef HLS_SYSTEMC_LIB_PATH
  HLS_SYSTEMC_LIB_PATH = $(AUTOPILOT_TOOL)/systemc/lib
endif

ifndef HLS_FPO_LIB_PATH
HLS_FPO_LIB_PATH = $(AUTOPILOT_TOOL)/fpo_v6_1
endif

ifdef AP_GCC_PATH
CC      = $(AP_GCC_PATH)/gcc
CXX     = $(AP_GCC_PATH)/g++
else
CC	= gcc
CXX	= g++
endif


LINUX	=
INCPATH	= .
SRCPATH = .
BINPATH = .
SYSC = $(HLS_SYSTEMC_HOME)
SYSCINC = $(SYSC)/include
SYSCLIB = $(HLS_SYSTEMC_LIB_PATH)
FPOLIB = $(HLS_FPO_LIB_PATH)
DEFINE =
ATBG_CFLAG = -DSST_SIM_ENABLE -DSST_ATBG_ENABLE
IFLAG += -I $(INCPATH) -I "$(SYSCINC)"
IFLAG += -I "$(AUTOPILOT_ROOT)/include"
#IFLAG += -I "$(AUTOPILOT_TECH)/autopilot/sim"
#IFLAG += -I "$(AUTOPILOT_TECH)/autopilot/etc"
IFLAG += -I "$(AUTOPILOT_TECH)/generic/SystemC/AESL_comp"
LFLAG += -L "$(SYSCLIB)" -lsystemc

ifdef CSIM_DESIGN_FPO
LFLAG += -L "$(FPOLIB)" -lgmp -lmpfr -lIp_floating_point_v6_1_bitacc_cmodel
endif

CFLAG += $(DEBUG) $(DEFINE) -DC_TEST
CFLAG += $(ATBG_CFLAG)


ifndef HLS_SOURCES
  # Find all .cpp, .cp, .cxx, .cc, .c++, .c, .C in current directory and in $(HLS_RtlSCDir).
  SUFFIX_CPP  = cpp
  SUFFIX_CP   = cp
  SUFFIX_CXX  = cxx
  SUFFIX_CC   = cc
  SUFFIX_C++  = c++
  SUFFIX_c    = c
  SUFFIX_C    = C
  SOURCES_CPP = $(wildcard *.$(SUFFIX_CPP))
  SOURCES_CP = $(wildcard *.$(SUFFIX_CP))
  SOURCES_CXX = $(wildcard *.$(SUFFIX_CXX))
  SOURCES_CC = $(wildcard *.$(SUFFIX_CC))
  SOURCES_C++ = $(wildcard *.$(SUFFIX_C++))
  SOURCES_c = $(wildcard *.$(SUFFIX_c))
  SOURCES_C = $(wildcard *.$(SUFFIX_C))

ifdef HLS_RtlSCDir
  SOURCES_CPP += $(wildcard $(HLS_RtlSCDir)/*.cpp)
  SOURCES_CC += $(wildcard $(HLS_RtlSCDir)/*.cc)
  SOURCES_C += $(wildcard $(HLS_RtlSCDir)/*.c)
endif

  FILE_SOURCES_CPP = $(notdir $(SOURCES_CPP))
  FILE_SOURCES_CC = $(notdir $(SOURCES_CC))
  FILE_SOURCES_C = $(notdir $(SOURCES_C))

  override HLS_SOURCES = $(SOURCES_CPP) $(SOURCES_CP) $(SOURCES_CXX) $(SOURCES_CC) $(SOURCES_C++) $(SOURCES_c) $(SOURCES_C)
endif

OBJECTS := $(basename $(notdir $(HLS_SOURCES)))
OBJECTS := $(OBJECTS:%=$(ObjDir)/%.o)


ERR_FILE = err.log

ERRNO=`wc -l $(ERR_FILE) | sed "s/ $(ERR_FILE)//"`

.debug1::
	$(Echo) "2 src: $(HLS_SOURCES)"
	$(Echo) "2 obj: $(OBJECTS)"
#--------------------------------------------------------------------
# Set the VPATH so that we can find source files.
#--------------------------------------------------------------------
VPATH=$(HLS_RtlSCDir)

#--------------------------------------------------------------------
# Reset the list of suffixes we know how to build
#--------------------------------------------------------------------
.SUFFIXES:
.SUFFIXES: .c .cc .cpp .h


#ENABLE_PROFILING :=
#ENABLE_OPTIMIZED := 1

ifdef ENABLE_PROFILING
  BuildMode := profile
  CXX.Flags := -O3 -DNDEBUG -felide-constructors -finline-functions -pg
  C.Flags   := -O3 -DNDEBUG -pg
  LD.Flags  := -O3 -DNDEBUG -pg 
else
  ifdef AP_ENABLE_OPTIMIZED
    BuildMode := release
    #CXX.Flags  := -O3 -DNDEBUG -finline-functions \
    #              -felide-constructors -fomit-frame-pointer
    CXX.Flags  := -O1 -DNDEBUG
    C.Flags    := -O1 -DNDEBUG -fomit-frame-pointer
    LD.Flags   := -O1 -DNDEBUG 
  else
    BuildMode := debug
    CXX.Flags := -D_DEBUG
    C.Flags   := -D_DEBUG
    LD.Flags  := -D_DEBUG
    KEEP_SYMBOLS := 1
  endif
endif


CPPFLAGS += $(IFLAG) $(CFLAG)
CFLAGS += $(IFLAG) $(CFLAG)
LDFLAGS += $(LFLAG)

ifdef AP_GCC_M32
CFLAGS += -m32
CPPFLAGS += -m32
LDFLAGS += -m32
endif

CXX.Flags += $(CXXFLAGS) -fpermissive $(ExtraCXXFlags)
C.Flags   += $(CFLAGS) $(ExtraCFlags)
CPP.Flags += $(CPPFLAGS) 
LD.Flags  += $(LDFLAGS) $(ExtraLDFlags)
AR.Flags  := cru
LibTool.Flags := --tag=CXX
#CompileCommonOpts := -Wall -W -Wwrite-strings -Wno-unused
CompileCommonOpts := 


#-------------- C/C++ to binary ----------------------------------------
Compile.C     = $(CC) $(CPP.Flags) $(CompileCommonOpts) -c $(C.Flags)
Compile.CXX   = $(CXX) $(CPP.Flags) $(CompileCommonOpts) $(CXX.Flags) -c

CXXPATH = $(shell which ${CXX})

ifndef CSIM_DESIGN
$(TARGET)::
	$(Echo) "   Build using \"${CXXPATH}\""
endif

$(TARGET):: $(ObjDir)/.dir $(OBJECTS)
	$(Echo) "   Generating $(TARGET)" $(AVE_DIR_DLOG)
	$(Verb)$(CXX) $(OBJECTS) $(LD.Flags) -o $@

#	$(Echo) "[$(MSGH)] Done!" $(AVE_DIR_DLOG)


#---------- Auto CPP/C Dependencies ----------
$(ObjDir)/%.o: %.cpp $(ObjDir)/.dir
	$(Echo) "   Compiling $*.cpp" $(AVE_DIR_DLOG)
	$(Verb) if $(Compile.CXX) $(DFLAG) -MD -MT $@ -MP -MF $(ObjDir)/$*.CXXd $< -o $@ ; \
	then $(MV) -f "$(ObjDir)/$*.CXXd" "$(ObjDir)/$*.d"; \
	else $(RM) -f "$(ObjDir)/$*.CXXd"; exit 1; fi

$(ObjDir)/%.o: %.cc $(ObjDir)/.dir
	$(Echo) "   Compiling $*.cc" $(AVE_DIR_DLOG)
	$(Verb) if $(Compile.CXX) $(DFLAG) -MD -MT $@ -MP -MF $(ObjDir)/$*.CXXd $< -o $@ ; \
	then $(MV) -f "$(ObjDir)/$*.CXXd" "$(ObjDir)/$*.d"; \
	else $(RM) -f "$(ObjDir)/$*.CXXd"; exit 1; fi

$(ObjDir)/%.o: %.c $(ObjDir)/.dir
	$(Echo) "   Compiling $*.c" $(AVE_DIR_DLOG)
	$(Verb) if $(Compile.C) $(DFLAG)  -MD -MT $@ -MP -MF $(ObjDir)/$*.Cd $< -o $@ ; \
	then $(MV) -f "$(ObjDir)/$*.Cd" "$(ObjDir)/$*.d"; \
	else $(RM) -f "$(ObjDir)/$*.Cd"; exit 1; fi


# This rules ensures that header files that are removed still have a rule for
# which they can be "generated."  This allows make to ignore them and
# reproduce the dependency lists.
%.h:: ;


#-------------- C/C++ to virtual binary --------------------------------
# You can use ExtraUserBCs to add additional BC object files to be linked.
#
#    set CFLAGS "-DAESL_SYN -I${AUTOPILOT_INC} -I${MATH_INC} \
#                -O0 -c -emit-llvm $ExtCFlags"

Extra.BCCPP.Flags += -emit-llvm -DAUTOPILOT_BC_SIM
BCC.Flags = $(CPP.Flags) $(CompileCommonOpts) $(C.Flags) $(Extra.BCCPP.Flags)
BCCXX.Flags = $(CPP.Flags) $(CompileCommonOpts) $(CXX.Flags) $(Extra.BCCPP.Flags)
Compile.BCC   = llvm-gcc $(BCC.Flags) -c -emit-llvm 
Compile.BCCXX = llvm-g++ $(BCCXX.Flags) -c -emit-llvm
Compile.BCLD  = llvm-ld -disable-inlining

#ifndef BCLibDir
#BCLibDir = $(HLS_RtlSCDir)/../tmp
#endif

#ExtraUserBCs := $(wildcard $(BCLibDir)/*.o.3.sim.bc)
#ExtraUsers := $(notdir $(ExtraUsers))

#VPATH=$(BCLibDir):$(VPATH)

SOURCES_C.BC += $(wildcard *.c)
OBJECTS_C.BC = $(SOURCES_C.BC:%.c=$(ObjDir)/%.bc)

OBJECTS.BC = $(ExtraUserBCs) $(OBJECTS_C.BC)

.debug2:
	$(Echo) "$(ExtraUsers)"
	$(Echo) "$(OBJECTS.BC)"


$(TARGET.BC): $(OBJECTS.BC)
	$(Echo) "   Generating BC $(TARGET.BC) from $(OBJECTS.BC)" $(AVE_DIR_DLOG)
	$(Verb)$(Compile.BCLD) $(OBJECTS.BC) $(BCLD.Flags) -o $@

#	$(Echo) "[$(MSGH)] Done!" $(AVE_DIR_DLOG)

#---------- Auto CPP/C to BC Dependencies ----------
$(ObjDir)/%.bc: %.cpp $(ObjDir)/.dir
	$(Echo) "   Compiling $*.cpp in bc." $(AVE_DIR_DLOG)
	$(Verb) if $(Compile.BCCXX) -MD -MT $@ -MP -MF $(ObjDir)/$*.CXXd $< -o $@ ; \
	then $(MV) -f "$(ObjDir)/$*.CXXd" "$(ObjDir)/$*.d"; \
	else $(RM) -f "$(ObjDir)/$*.CXXd"; exit 1; fi

$(ObjDir)/%.bc: %.cc $(ObjDir)/.dir
	$(Echo) "   Compiling $*.cpp in bc." $(AVE_DIR_DLOG)
	$(Verb) if $(Compile.BCCXX) -MD -MT $@ -MP -MF $(ObjDir)/$*.CXXd $< -o $@ ; \
	then $(MV) -f "$(ObjDir)/$*.CXXd" "$(ObjDir)/$*.d"; \
	else $(RM) -f "$(ObjDir)/$*.CXXd"; exit 1; fi

$(ObjDir)/%.bc: %.c $(ObjDir)/.dir
	$(Echo) "   Compiling $*.c in bc" $(AVE_DIR_DLOG)
	$(Verb) if $(Compile.BCC) -MD -MT $@ -MP -MF $(ObjDir)/$*.Cd $< -o $@ ; \
	then $(MV) -f "$(ObjDir)/$*.Cd" "$(ObjDir)/$*.d"; \
	else $(RM) -f "$(ObjDir)/$*.Cd"; exit 1; fi


#---------- Include CPP Dependencies
Sources := $(HLS_SOURCES)
DependFiles := $(basename $(filter %.cpp %.c %.cc, $(Sources)))
DependFiles := $(patsubst %,$(ObjDir)/%.d,$(DependFiles))
-include /dev/null $(DependFiles)

.debug:
	$(Echo) $(DependFiles)

#--- To create other directories, as needed, and timestamp their creation
%/.dir:
	$(Verb)	$(MKDIR) $* >/dev/null
	$(Verb) $(DATE) > $@

.PRECIOUS: $(ObjDir)/.dir


debug:
	make DEBUG="-g -D_DEBUG" -f Makefile

clean:
	$(Echo) "[$(MSGH)] Removing $(OBJECTS) $(DependFiles) $(TARGET) .." $(AVE_DIR_DLOG)
	$(Verb)-rm -rf $(OBJECTS)
	$(Verb)-rm -rf $(OBJECTS_C.BC)
	$(Verb)-rm -rf $(DependFiles)
	$(Verb)-rm -rf $(TARGET)
	$(Echo) "[$(MSGH)] Done!" $(AVE_DIR_DLOG)

explain:
	$(Echo) "The following information represents your program:" 
	$(Echo) "Final executable name: $(TARGET)"
	$(Echo) "Source files:      $(HLS_SOURCES)"
	$(Echo) "Object files:      $(OBJECTS)"
	$(Echo) "Dep files:         $(DEPS)"

